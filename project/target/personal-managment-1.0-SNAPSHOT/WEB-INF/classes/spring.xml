<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--配置数据源-->
    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/user_managment?useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="2893"/>
    </bean>
    <!--配置mybatis核心类会话工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="typeAliasesPackage" value="com.wf.entity"/>
        <property name="configLocation" value="classpath:mybatis-plugin.xml" />

      <!--  <property name="mapperLocations" value="classpath:com/wf/dao/*.xml"/>-->
    </bean>

    <!--配置持久化对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wf.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>



    <!--声明式事务-->
    <bean id="transation" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>

    <!--通知-->
    <tx:advice id="txAdvice" transaction-manager="transation">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--织入-->
    <aop:config >
        <aop:pointcut id="txPointcut" expression="execution(* com.wf.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


    <!--自动扫描-->
    <context:component-scan base-package="com.wf">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <aop:aspectj-autoproxy/>


    <!--
       1. 配置 SecurityManager
   -->
    <bean id ="securityManager" class ="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!--<property name="sessionManager" ref="native"/>-->
        <property name ="authenticator" ref ="authenticator"/>

        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>

            </list>
        </property>
        <!--设置cookie存活时间（秒）-->
        <property name="rememberMeManager.cookie.maxAge" value="1000"/>
    </bean>

    <!--
        2.配置CacheManager 缓存
        2.1 需要加入 ehcache 的 jar 包及配置文件
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!--
        认证策略 AuthenticationStrategy接口的默认实现
        FirstSuccessfulStrategy:只有一个 Realm 验证成功即可,且返回第一个 Realm 身份验证成功的认证信息,其它的忽略
        AtLeastOneSuccessfulStrategy:只有一个 Realm 验证成功即可,和FirstSuccessfulStrategy不同,将返回所有 Realm 身份认证成功的认证信息
        AllSuccessfulStrategy:所有Realm 验证成功才算成功,且返回所有Realm 身份验证成功的认证信息,如果有一个失败则失败
    -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!--
        3.配置 Realm
        3.1 直接实现了Realm接口的bean
    -->
    <bean id="jdbcRealm" class="com.wf.security.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>

    <!--
        4.配置LifecycleBeanPostProcessor 可以自定的来调用配置在Spring IOC容器中 shiro bean 的生命周期方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--
        5.启用 IOC 容器中使用shiro 的注解,但必须在配置了lifecycleBeanPostProcessor之后才可以使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
        6.配置ShiroFilter
        6.1 id 必须和 web.xml 文件中配置的DelegatingFilterProxy 的 <filter-name>一致
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>

        <!--
            配置那些页面需要收保护,以及访问这些页面需要的权限
            1. anon 可以被匿名访问
            2. authc 必须认证(即登陆)后才可以访问
            3.logout 登出
            4.roles 角色过滤器
        -->
        <!--<property name="filterChainDefinitions">-->
        <!--<value>-->
        <!--/login.jsp = anon-->
        <!--/shiro/login = anon-->
        <!--/shiro/logout = logout-->

        <!--/user.jsp = roles[user]-->
        <!--/admin.jsp = roles[admin]-->

        <!--/** = authc-->
        <!--</value>-->
        <!--</property>-->
    </bean>

    <!--配置一个bean,该bean 实际上是一个Map, 通过实例工厂方法的方式-->
    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder" factory-method="builFilterChainDefinitionMap"></bean>
    <bean id="filterChainDefinitionMapBuilder" class="com.wf.security.filterChainDefinitionMapBuilder"></bean>

</beans>